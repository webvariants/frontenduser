<?php
/*
 * Copyright (c) 2010, webvariants GbR, http://www.webvariants.de
 *
 * This file is released under the terms of the MIT license. You can find the
 * complete text in the attached LICENSE file or online at:
 *
 * http://www.opensource.org/licenses/mit-license.php
 */

$form      = new sly_Form('index.php', 'POST', 'Attribut '.($func == 'add' ? 'erstellen' : 'bearbeiten'), '', 'attribute');
$datatypes = WV_Datatype::getAll();

$form->addHiddenValue('page',    'frontenduser');
$form->addHiddenValue('subpage', 'attributes');
$form->addHiddenValue('func',    'do_'.$func);
$form->addHiddenValue('id',      $attribute ? $attribute->getID() : '');

////////////////////////////////////////////////////////////////////////////////
// Normale Felder

$name = new sly_Form_Input_Text('name', 'Interner Name', $attribute ? $attribute->getName() : '');
$name->setHelpText('Über diesen Namen wird das Attribut programmseitig angsprochen.');

$title = new sly_Form_Input_Text('title', 'Titel', $attribute ? $attribute->getTitle() : '');
$title->setHelpText('Der Titel wird innerhalb von REDAXO in allen Formularen angezeigt.');

$helptext = new sly_Form_Textarea('helptext', 'Hilfetext', $attribute ? $attribute->getHelpText() : '');
$helptext->setHelpText('Hier können Sie eine kurze Erklärung zum Attribut eingeben, die im Frontend angezeigt wird.');
$helptext->setAttribute('rows', 2);
$helptext->setAttribute('cols', 50);

$hidden = new sly_Form_Input_Checkbox('hidden', 'Anzeige', '1', 'Dieses Attribut soll im Backend nicht angezeigt werden.');
$hidden->setChecked($attribute && $attribute->isHidden());

////////////////////////////////////////////////////////////////////////////////
// Datentypauswahl und -formularteile zusammenbauen

$datatypeList  = array();
$datatypeForms = array();

foreach ($datatypes as $id => &$className) {
	$datatypeList[$id] = rex_translate(WV_Datatype::getTitle($id));
}

$datatype = new sly_Form_Select_DropDown('datatype', 'Datentyp', $attribute ? $attribute->getDatatypeID() : -1, $datatypeList);
$datatype->setAttribute('onchange', 'wv16.changeDatatype(this)');

$form->addElements(array($name, $title, $helptext, $hidden, $datatype));

////////////////////////////////////////////////////////////////////////////////
// Neuen Bereich anlegen, in dem die Datentypen sich austoben dürfen

$form->beginFieldset('Einstellungen für den gewählten Datentyp');

$firstRun = true; // beim Hinzufügen eines Attributs das erste Feld für den Datentyp angezeigt lassen

foreach (array_keys($datatypes) as $id) {
	$selected = $attribute && $id == $attribute->getDatatypeID();
	$params   = $selected ? array($attribute->getParams(), '') : array(null, null);
	$display  = (!$attribute && $firstRun) || ($attribute && $id == $attribute->getDatatypeID());

	$slice = WV_Datatype::call($id, 'renderConfigForm', $params);
	$slice->integrate($form, array(
		'id'    => 'datatype_form_'.$id,
		'style' => $display ? '' : 'display:none'
	));

	$firstRun = false;
}

////////////////////////////////////////////////////////////////////////////////
// Benutzetyp-Liste anpassen

$form->beginFieldset('Zugehörige Benutzertypen');

$types = array();

foreach (WV16_Users::getAllUserTypes() as $typeObj) {
	$types[$typeObj->getID()] = $typeObj->getTitle();
}

$userTypes = new sly_Form_Select_Checkbox('utypes', 'Benutzertypen', $attribute ? $attribute->getUserTypes() : array(), array());
$userTypes->setValues($types);
$userTypes->setHelpText('Dieses Attribut gehört zu den obenstehenden Benutzertypen.');
$form->add($userTypes);

////////////////////////////////////////////////////////////////////////////////
// Löschen-Button

if ($attribute) {
	$delete = new sly_Form_Input_Button('submit', 'delete', 'Löschen');
	$delete->setAttribute('onclick', 'return confirm("Soll dieses Attribut wirklich gelöscht werden?")');
	$form->setDeleteButton($delete);
}

////////////////////////////////////////////////////////////////////////////////
// Fertig!

$form->setFocus('name');
$form->render();
