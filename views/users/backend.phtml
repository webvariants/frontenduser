<?php
/*
 * Copyright (c) 2016, webvariants GmbH & Co. KG, http://www.webvariants.de
 *
 * This file is released under the terms of the MIT license. You can find the
 * complete text in the attached LICENSE file or online at:
 *
 * http://www.opensource.org/licenses/mit-license.php
 */

use wv\FrontendUser\Provider;
use wv\FrontendUser\UserType;

if (!empty($errormsg)) {
	print sly_Helper_Message::warn($errormsg);
}

$form = new sly_Form($_router->getPlainUrl('frontenduser', 'do_'.$func), 'POST', 'Benutzer '.($func == 'add' ? 'erstellen' : 'bearbeiten'), '', 'wv16_user');

$form->addHiddenValue('id',    $user ? $user->getID() : '');
$form->addHiddenValue('setid', $user ? $set : '');

////////////////////////////////////////////////////////////////////////////////
// Normale Felder

$login     = new sly_Form_Input_Text('login', 'Login', $user ? $user->getLogin() : '');
$password1 = new sly_Form_Input_Password('password', 'Passwort', '');
$password2 = new sly_Form_Input_Password('password2', 'Passwort wiederholen', '');
$confirmed = new sly_Form_Input_Checkbox('confirmed', 'Bestätigt', 1, 'Dieses Benutzerkonto ist bestätigt.');
$activated = new sly_Form_Input_Checkbox('activated', 'Freigeschaltet', 1, 'Dieses Benutzerkonto ist freigeschaltet.');

$confirmed->setChecked($user && $user->isConfirmed());
$confirmed->setHelpText('Bestätigung bedeutet, dass der Benutzer sein Konto selbst validiert (z.B. über einen Link in einer E-Mail) hat.');

$activated->setChecked(!$user || $user->isActivated());
$activated->setHelpText('Nur hier freigeschaltete Benutzer können sich einloggen.');

$types       = Provider::getUserTypes();
$typesSelect = array();

foreach ($types as $name => $type) {
	$typesSelect[$name] = sly_translate($type->getTitle());
}

reset($types);
$form->addElements(array($login, $password1, $password2, $activated, $confirmed));

if (count($types) === 1) {
	$form->addHiddenValue('type', key($types));
}
else {
	$type = new sly_Form_Select_DropDown('type', 'Benutzertyp', $user ? $user->getTypeName() : UserType::DEFAULT_NAME, $typesSelect);
	$form->add($type);
}

////////////////////////////////////////////////////////////////////////////////
// Attribute bearbeiten

if (isset($_POST['type'])) {
	$userType = sly_post('type', 'string', key($types));
}
else {
	$userType = $user ? $user->getTypeName() : key($types);
}

// switch to the currently selected set
if ($user) {
	$activeSet = $user->getSetID();
	$user->setSetID($set);
}

$requiredInfos = Provider::getAttributes($userType);
$assignedData  = $user ? $user->getValues(true) : array();
$dataToDisplay = $this->getAttributesToDisplay($assignedData, $requiredInfos);
$attributes    = array_keys($user ? $user->getType()->getAttributes() : $requiredInfos);

if (!empty($dataToDisplay)) {
	$form->beginFieldset('Benutzerdaten', 'wv16attributes');
}

foreach ($dataToDisplay as $attrName => $data) {
	$attribute = $data['attribute'];
	$value     = $data['value'];
	$hidden    = !in_array($attrName, $attributes);
	$visible   = $attribute->isVisible() ? '' : ' wv16_hidden_attribute';

	$style    = $hidden ? ' style="display:none"' : '';
	$fragment = new sly_Form_Fragment('<div id="wv16_attribute'.$attribute->getID().'_row" class="wv16_attribute_row'.$visible.'"'.$style.'>');

	$form->add($fragment);
	$attribute->renderForm($form, array($value));
	$form->add(new sly_Form_Fragment('</div>'));
}

// reset the setID
if ($user) {
	$user->setSetID($activeSet);
}

////////////////////////////////////////////////////////////////////////////////
// Zuordnung zu den Gruppen

$assignedGroups = $user ? $user->getGroupNames() : array();
$groups         = array();

foreach (Provider::getGroups() as $name => $group) {
	$groups[$name] = sly_translate($group->getTitle());
}

if (!empty($groups)) {
	$form->beginFieldset('Dieser Benutzer gehört den folgenden Gruppen an:');
	$groups = new sly_Form_Select_Checkbox('groups', 'Benutzergruppen', $assignedGroups, $groups);
	$form->add($groups);
}
elseif (!empty($dataToDisplay)) {
	$form->beginFieldset('Optionen');
}

////////////////////////////////////////////////////////////////////////////////
// Buttons festlegen

if ($user) {
	$delete = new sly_Form_Input_Button('submit', 'delete', 'Löschen');
	$delete->setAttribute('onclick', 'return confirm("Sicher, dass dieser Benutzer gelöscht werden soll?")');
	$form->setDeleteButton($delete);
}

////////////////////////////////////////////////////////////////////////////////
// Fertig!

$form->setFocus('login');
$form = sly_Core::dispatcher()->filter('WV16_USER_FORM', $form, compact('user', 'func'));
print $form->render();

?>

<script type="text/javascript">
var wv16 = {
	attributesPerType: [],
	activeSet:         <?php print $user ? $set : 'null'; ?>,
	userID:            <?php print $user ? $user->getID() : 'null'; ?>,
	userSets:          []
};
<?php

// Arrays generieren, die die Informationen beinhalten, welche Metainfos in welchem Typ
// vorhanden sind.

foreach (Provider::getUserTypes() as $type) {
	print 'wv16.attributesPerType[\''.$type->getName().'\'] = [';

	$list = array();

	foreach ($type->getAttributes() as $attr) {
		if (!$attr->isVisible()) continue;
		$list[] = $attr->getID();
	}

	print implode(', ', $list);
	print "];\n";
}

if ($user) {
	$setIDs = $user->getSetIDs(false);
	print 'wv16.userSets = ['.implode(', ', $setIDs)."];\n";
}

?>
</script>
